@using Plugin.LocalNotification
@inject ScSoMe.Common.ApiClientFactory apiClientFactory
@inject ScSoMe.RazorLibrary.AppState appState
@inject NavigationManager NavigationManager

<div>
    <MudList Clickable="true" @bind-SelectedValue="selectedValue" class="notification-list">
        <MudListSubheader Class="d-flex justify-space-between px-0">
            <MudContainer class="d-flex p-0 m-0 justify-space-between notification-header">
                <MudChipSet @bind-SelectedChip="selectedChip" Filter="true" Mandatory="true">
                    <MudChip Text="@FilterType.All.ToString()" Variant="Variant.Text" Color="MudBlazor.Color.Default">@FilterType.All</MudChip>
                    <MudChip Text="@FilterType.Unread.ToString()" Variant="Variant.Outlined">@FilterType.Unread</MudChip>
                </MudChipSet>
                <MudButton Class="w-auto" Variant="Variant.Text" Size="MudBlazor.Size.Small" Color="MudBlazor.Color.Default" StartIcon="@Icons.Filled.DoneAll" OnClick="MarkAllRead">Mark all as read</MudButton>
            </MudContainer>
        </MudListSubheader>

        @*// This seems like stupid code, but I can't think of another way. What's a better way of doing this? Someone refactor pls*@
        @if (selectedChip != null && selectedChip.Text.Equals(FilterType.Unread.ToString()))
        {
            if (messages.Count > 0)
            {
                foreach (var msg in messages)
                {
                    if (!msg.IsRead)
                    {
                        <ScSoMe.RazorLibrary.Pages.Components.Notification.NotificationItem Msg="msg" OnDelete="DeleteNotification" OnOpen="OpenNotification" />
                    }
                }
            }
            else
            {
                    <MudText Style="@("text-align: center;")">You don't have any notifications.</MudText>
            }
        }
        else
        {
            if (messages.Count > 0)
            {
                foreach (var msg in messages)
                {
                    <ScSoMe.RazorLibrary.Pages.Components.Notification.NotificationItem Msg="msg" OnDelete="DeleteNotification" OnOpen="OpenNotification" />
                }
            }
            else
            {
             <MudText Style="@("text-align: center;")">You don't have any notifications.</MudText>             
            }
        }
    </MudList>
</div>

@code {
    private object selectedValue = 1;
    private MudChip selectedChip { get; set; }
    private ICollection<API.NotificationMessage> messages = new List<API.NotificationMessage>();
    private ICollection<API.NotificationMessage> unreadMessages = new List<API.NotificationMessage>();
    public int UnReadNotifications { get; set; }
    public API.ScSoMeApi? client { get; set; }

    enum FilterType
    {
        All,
        Unread
    }

    protected override async Task OnParametersSetAsync()
    {
        CycleLoading(/* call before instantiating the client*/);
        await Task.Delay(1);
        client = apiClientFactory.GetApiClient();
        await LoadNewMsgs();
    }

    private async Task CycleLoading()
    {
        if (client != null)
            return;

        // broken too in Android 8=26 - dont know about other Android versions
        if (apiClientFactory.DeviceType.Equals("Android"))
        {
            if (System.Environment.OSVersion.Version.Major != 26)
            {
                NotificationCenter.Current.NotificationTapped += Current_NotificationTapped;
            }
        }

        const int secInMinute = 60;
        var random = new Random(Guid.NewGuid().GetHashCode());
        await Task.Factory.StartNew(async () =>
        {
            while (true)
            {
                var delay = TimeSpan.FromSeconds(secInMinute) + TimeSpan.FromSeconds(random.Next(4 * secInMinute));
                await Task.Delay(delay);
                try
                {
                    await InvokeAsync(async () => await LoadNewMsgs());
                }
                catch (Exception problem)
                {
                    problem.ToString();
                    // ignore problem
                }
            }
        });
    }

    private void FilterNotifications(MudChip selectedChip)
    {
        if (selectedChip != null)
        {
            switch (selectedChip.Text.ToLower())
            {
                case "all":
                    Console.WriteLine("all");
                    break;
                case "unread":
                    Console.WriteLine("Unread");
                    break;
            }
        }
    }

    public async Task LoadNewMsgs()
    {
        if (client == null) return;

        messages = await client.GetMemberNotificationsAsync();

        // TODO Recactor this :

        if (apiClientFactory.IsMAUI)
        {
            var folder = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);

            var oldFiles = new DirectoryInfo(folder).GetFiles("scSoMe-notificationIds-*.json").OrderByDescending(x => x.Name);
            var oldFileContent = "[]";
            var oldFile = oldFiles.FirstOrDefault();
            if (oldFile != null)
                oldFileContent = File.ReadAllText(oldFile.FullName);
            var oldNotifications = System.Text.Json.JsonSerializer.Deserialize<ICollection<int>>(oldFileContent);

            var newNotifications = messages.ExceptBy(oldNotifications, x => x.NotificationId);

            if (newNotifications.Count() > 0)
            {
                var ticks = DateTime.Now.Ticks.ToString("D");
                var newFileContent =
                    System.Text.Json.JsonSerializer.Serialize<ICollection<int>>(messages.Select(x => x.NotificationId).ToArray());
                File.WriteAllText(folder + Path.DirectorySeparatorChar + "scSoMe-notificationIds-" + ticks + ".json",
                    newFileContent);
                if (oldFile != null)
                    oldFile.Delete();

                //                foreach (var note in newNotifications)
                //                {
                //                    var notification = new NotificationRequest
                //                    {
                //                        NotificationId = note.NotificationId,
                //                        Title = "Startup Lounge",// + note.PostId,
                //                        Description = note.Message,
                //                        ReturningData = note.NotificationId.ToString("D"), // Returning data when tapped on notification.
                //                        /*
                //                        Schedule =
                //                        {
                //                            NotifyTime = DateTime.Now.AddSeconds(30) // Used for Scheduling local notification, if not specified notification will show immediately.
                //                        }*/
                //                        Android =
                //{
                //VisibilityType = Plugin.LocalNotification.AndroidOption.AndroidVisibilityType.Public,
                //AutoCancel = false,
                //ChannelId = "New Lounge",
                //}
                //                    };
                //                    //TODO: On iOS notifications must be permitted see https://github.com/thudugala/Plugin.LocalNotification or https://github.com/EgorBo/Toasts.Forms.Plugin

                //                    /*await // dont block the UI thread here */
                //                    // Android or IOS
                //                    if (!apiClientFactory.DeviceType.Equals("WinUI"))
                //                        try
                //                        {
                //                            if (System.Environment.OSVersion.Version.Major != 26) // Android 8 throw Exception
                //                            {
                //                                await NotificationCenter.Current.Show(notification); // in Android Tapping the notification switches to the app
                //                            }
                //                        }
                //                        catch (Exception android11Exception)
                //                        {
                //                            android11Exception.ToString();
                //                        }

                //                    /*
                //                    if (apiClientFactory.DeviceType.Equals("WinUI"))
                //                        {
                //                        new CommunityToolkit.WinUI.Notifications.ToastContentBuilder()
                //                            .AddArgument("action", "viewConversation")
                //                            .AddArgument("conversationId", 9813)
                //                            .AddText("Andrew sent you a picture")
                //                            .AddText("Check this out, The Enchantments in Washington!")
                //                    .Show();
                //                    }
                //                    // TODO: Windows ? https://docs.microsoft.com/en-us/windows/apps/design/shell/tiles-and-notifications/send-local-toast?tabs=uwp
                //                */
                //                }
            }
        }


        var newUnReadNotifi = messages.Where(x => x.IsRead == false).Count();
        var stateChanged = newUnReadNotifi != UnReadNotifications;
        UnReadNotifications = newUnReadNotifi;

        if (stateChanged)
            StateHasChanged();
    }

    private async Task MarkAllRead()
    {
        var unReadMsgs = messages.Where(x => x.IsRead == false).ToList();
        if (client != null && unReadMsgs.Count > 0)
        {
            await client.ReadAllNotificationsAsync(unReadMsgs);
            UnReadNotifications = 0;
            await LoadNewMsgs();
            appState.NotifyNotificationsChanged();
        }
    }

    private async Task DeleteNotification(int notificationId)
    {
        if (client != null)
        {
            await client.RemoveSubscriberNotificationAsync(notificationId);
        }

        await LoadNewMsgs();

        if (messages.Count() == 0)
        {
            selectedValue = 1;
            StateHasChanged();
        }
        appState.NotifyNotificationsChanged();
    }

    private void Current_NotificationTapped(Plugin.LocalNotification.EventArgs.NotificationEventArgs e)
    {
        var notificationIdString = e.Request.ReturningData;
        var notificationId = int.Parse(notificationIdString);
        var notification = messages.FirstOrDefault(x => x.NotificationId == notificationId);
        if (notification == null)
            return;

        InvokeAsync(async () => await NavigateToNotificationPost(notification.NotificationId));
    }

    private async Task OpenNotification(int? notificationId)
    {
        if (selectedValue != null && client != null)
        {
            await NavigateToNotificationPost(notificationId.Value);
        }
        await LoadNewMsgs();
    }

    private async Task NavigateToNotificationPost(int notificationId)
    {
        var notificationMessage = messages.Single(x => x.NotificationId == notificationId);
        long postId = notificationMessage.PostId.Value;
        int groupId = -1;
        if (notificationMessage.GroupId.HasValue)
        {
            groupId = notificationMessage.GroupId.Value;
        }
        else
        {
            API.Post selectedPost = await client.GetPostWithCommentsAsync(postId);
            groupId = selectedPost.GroupId;
        }
        foreach (var g in appState.AllGroups)
        {
            if (g.GroupId == groupId)
            {
                selectedValue = 1;
                NavigationManager.NavigateTo($"./groups/{g.GroupName}/{postId:D}");
                break;
            }
        }
        StateHasChanged();

        _ = Task.Factory.StartNew(async () =>
        {
            await client.SetReadNotificationAsync(notificationId);
            appState.NotifyNotificationsChanged();
        });
    }
}

