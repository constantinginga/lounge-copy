// //----------------------
// // <auto-generated>
// //     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// // </auto-generated>
// //----------------------

// #pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
// #pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
// #pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
// #pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
// #pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
// #pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
// #pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
// #pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
// #pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
// #pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

// namespace API
// {
//     using System = global::System;

//     [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class ScSoMeApi 
//     {
//         private string _baseUrl = "";
//         private System.Net.Http.HttpClient _httpClient;
//         private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

//         public ScSoMeApi(string baseUrl, System.Net.Http.HttpClient httpClient)
//         {
//             BaseUrl = baseUrl;
//             _httpClient = httpClient;
//             _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//         }

//         private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//         {
//             var settings = new Newtonsoft.Json.JsonSerializerSettings();
//             UpdateJsonSerializerSettings(settings);
//             return settings;
//         }

//         public string BaseUrl
//         {
//             get { return _baseUrl; }
//             set { _baseUrl = value; }
//         }

//         protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

//         partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//         partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<RegistrationResult> UserRegistrationAsync(Registration body)
//         {
//             return UserRegistrationAsync(body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<RegistrationResult> UserRegistrationAsync(Registration body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/AccountRegistration/UserRegistration");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<RegistrationResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CountryCode>> GetCountryCodesAsync()
//         {
//             return GetCountryCodesAsync(System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CountryCode>> GetCountryCodesAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/AccountRegistration/GetCountryCodes");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CountryCode>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 405)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Method Not Allowed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MatchingPost>> SearchForTextAsync(string like, int? groupId)
//         {
//             return SearchForTextAsync(like, groupId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MatchingPost>> SearchForTextAsync(string like, int? groupId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/SearchForText?");
//             if (like != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("like") + "=").Append(System.Uri.EscapeDataString(ConvertToString(like, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (groupId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MatchingPost>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<OpenGraphInfo> GetOpenGraphForPostAsync(long? postId)
//         {
//             return GetOpenGraphForPostAsync(postId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<OpenGraphInfo> GetOpenGraphForPostAsync(long? postId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/GetOpenGraphForPost?");
//             if (postId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("postId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<OpenGraphInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task ReportMessageIdAsync(WriteMessage body)
//         {
//             return ReportMessageIdAsync(body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task ReportMessageIdAsync(WriteMessage body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/ReportMessageId");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task EditTextAsync(WriteMessage body)
//         {
//             return EditTextAsync(body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task EditTextAsync(WriteMessage body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/EditText");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 202)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Created</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<long> CreatePostAsync(int? belongsToGroupId, bool? hasMedia, WriteMessage body)
//         {
//             return CreatePostAsync(belongsToGroupId, hasMedia, body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Created</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<long> CreatePostAsync(int? belongsToGroupId, bool? hasMedia, WriteMessage body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/CreatePost?");
//             if (belongsToGroupId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("belongsToGroupId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(belongsToGroupId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (hasMedia != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("hasMedia") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hasMedia, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 201)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Created</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<long> CreateCommentAsync(long? parentMessageId, long? belongsToPostId, int? belongsToGroupId, WriteMessage body)
//         {
//             return CreateCommentAsync(parentMessageId, belongsToPostId, belongsToGroupId, body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Created</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<long> CreateCommentAsync(long? parentMessageId, long? belongsToPostId, int? belongsToGroupId, WriteMessage body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/CreateComment?");
//             if (parentMessageId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("parentMessageId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(parentMessageId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (belongsToPostId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("belongsToPostId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(belongsToPostId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (belongsToGroupId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("belongsToGroupId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(belongsToGroupId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 201)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<long>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MemberLike>> GetLikersAsync(long? messageId)
//         {
//             return GetLikersAsync(messageId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MemberLike>> GetLikersAsync(long? messageId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/GetLikers?");
//             if (messageId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("messageId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MemberLike>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<bool> LikeMsgAsync(LikeCommand body)
//         {
//             return LikeMsgAsync(body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<bool> LikeMsgAsync(LikeCommand body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/LikeMsg");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Created</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task TrackMsgAsync(TrackCommand body)
//         {
//             return TrackMsgAsync(body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Created</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task TrackMsgAsync(TrackCommand body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/TrackMsg");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 201)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>No Content</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task UnTrackMsgAsync(TrackCommand body)
//         {
//             return UnTrackMsgAsync(body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>No Content</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task UnTrackMsgAsync(TrackCommand body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/UnTrackMsg");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 204)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<int> GetPostSeenAsync(long? postId)
//         {
//             return GetPostSeenAsync(postId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<int> GetPostSeenAsync(long? postId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/GetPostSeen?");
//             if (postId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("postId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task SetPostSeenAsync(long? postId)
//         {
//             return SetPostSeenAsync(postId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task SetPostSeenAsync(long? postId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/SetPostSeen?");
//             if (postId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("postId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<bool> PostIsTrackedAsync(long? postId)
//         {
//             return PostIsTrackedAsync(postId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<bool> PostIsTrackedAsync(long? postId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/PostIsTracked?");
//             if (postId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("postId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>No Content</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task DeleteMessageAndAllChildrenAsync(long? messageId)
//         {
//             return DeleteMessageAndAllChildrenAsync(messageId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>No Content</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task DeleteMessageAndAllChildrenAsync(long? messageId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/DeleteMessageAndAllChildren?");
//             if (messageId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("messageId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 204)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<Comment> GetCommentWithoutChildrenAsync(long? messageId)
//         {
//             return GetCommentWithoutChildrenAsync(messageId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<Comment> GetCommentWithoutChildrenAsync(long? messageId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/GetCommentWithoutChildren?");
//             if (messageId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("messageId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<Comment>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<Post> GetPostWithCommentsAsync(long? postId)
//         {
//             return GetPostWithCommentsAsync(postId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<Post> GetPostWithCommentsAsync(long? postId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/GetPostWithComments?");
//             if (postId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("postId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<Post>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Post>> GetLatestLimitedPostsForGroupAsync(int? groupId, System.DateTimeOffset? fromDate, int? takeLimit, bool? includeAllComments)
//         {
//             return GetLatestLimitedPostsForGroupAsync(groupId, fromDate, takeLimit, includeAllComments, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Post>> GetLatestLimitedPostsForGroupAsync(int? groupId, System.DateTimeOffset? fromDate, int? takeLimit, bool? includeAllComments, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/GetLatestLimitedPostsForGroup?");
//             if (groupId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (fromDate != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("fromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (takeLimit != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("takeLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(takeLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (includeAllComments != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("includeAllComments") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeAllComments, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Post>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Post>> GetLatestPostsForGroupAsync(int? groupId, System.DateTimeOffset? fromDate, int? daysBack, bool? includeAllComments)
//         {
//             return GetLatestPostsForGroupAsync(groupId, fromDate, daysBack, includeAllComments, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Post>> GetLatestPostsForGroupAsync(int? groupId, System.DateTimeOffset? fromDate, int? daysBack, bool? includeAllComments, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/GetLatestPostsForGroup?");
//             if (groupId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (fromDate != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("fromDate") + "=").Append(System.Uri.EscapeDataString(fromDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (daysBack != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("daysBack") + "=").Append(System.Uri.EscapeDataString(ConvertToString(daysBack, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (includeAllComments != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("includeAllComments") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeAllComments, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Post>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Emoji>> GetEmojiListAsync()
//         {
//             return GetEmojiListAsync(System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Emoji>> GetEmojiListAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/GetEmojiList");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Emoji>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<string> GetUrlMetadataAsync(string url)
//         {
//             return GetUrlMetadataAsync(url, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<string> GetUrlMetadataAsync(string url, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/GetUrlMetadata?");
//             if (url != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("url") + "=").Append(System.Uri.EscapeDataString(ConvertToString(url, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task CreateEmbeddedAsync(long? belongsToPostId, Embedded body)
//         {
//             return CreateEmbeddedAsync(belongsToPostId, body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task CreateEmbeddedAsync(long? belongsToPostId, Embedded body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/CreateEmbedded?");
//             if (belongsToPostId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("belongsToPostId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(belongsToPostId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<string> GetEmbeddedAsync(long? belongsToPostId)
//         {
//             return GetEmbeddedAsync(belongsToPostId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<string> GetEmbeddedAsync(long? belongsToPostId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/GetEmbedded?");
//             if (belongsToPostId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("belongsToPostId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(belongsToPostId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<Translation> TranslatePostAsync(long? commentId)
//         {
//             return TranslatePostAsync(commentId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<Translation> TranslatePostAsync(long? commentId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/TranslatePost?");
//             if (commentId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("commentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(commentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<Translation>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task SetPostHasMediaAsync(long? postId)
//         {
//             return SetPostHasMediaAsync(postId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task SetPostHasMediaAsync(long? postId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/SetPostHasMedia?");
//             if (postId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("postId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BlobDto>> GetPostBlobsAsync(int? postId)
//         {
//             return GetPostBlobsAsync(postId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BlobDto>> GetPostBlobsAsync(int? postId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/GetPostBlobs?");
//             if (postId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("postId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BlobDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task DeletePostSingleMediaFileAsync(int? postId, string fileName)
//         {
//             return DeletePostSingleMediaFileAsync(postId, fileName, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task DeletePostSingleMediaFileAsync(int? postId, string fileName, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/DeletePostSingleMediaFile?");
//             if (postId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("postId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (fileName != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("fileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task DeletePostAllMediaFilesAsync(long? postId)
//         {
//             return DeletePostAllMediaFilesAsync(postId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task DeletePostAllMediaFilesAsync(long? postId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Comments/DeletePostAllMediaFiles?");
//             if (postId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("postId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Created</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<int> CreateGroupBannerAsync(GroupBanner body)
//         {
//             return CreateGroupBannerAsync(body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Created</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<int> CreateGroupBannerAsync(GroupBanner body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/controller/CreateGroupBanner");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 201)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScGroup>> GetGroupsAsync()
//         {
//             return GetGroupsAsync(System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScGroup>> GetGroupsAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Groups/GetGroups");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ScGroup>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task MarkAsReadUntilNowAsync(int? groupId)
//         {
//             return MarkAsReadUntilNowAsync(groupId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task MarkAsReadUntilNowAsync(int? groupId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Groups/MarkAsReadUntilNow?");
//             if (groupId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<TrackedAndNewPosts> NumberOfNewPostsAsync(int? groupId)
//         {
//             return NumberOfNewPostsAsync(groupId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<TrackedAndNewPosts> NumberOfNewPostsAsync(int? groupId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Groups/NumberOfNewPosts?");
//             if (groupId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<TrackedAndNewPosts>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Created</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task GroupTrackedAsync(int? groupId, bool? tracked)
//         {
//             return GroupTrackedAsync(groupId, tracked, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Created</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task GroupTrackedAsync(int? groupId, bool? tracked, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Groups/GroupTracked?");
//             if (groupId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (tracked != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("tracked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tracked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 201)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task CreateGroupAsync(string groupName, string groupURL)
//         {
//             return CreateGroupAsync(groupName, groupURL, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task CreateGroupAsync(string groupName, string groupURL, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Groups/CreateGroup?");
//             if (groupName != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (groupURL != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupURL") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupURL, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 201)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task RemoveGroupAsync(string groupName)
//         {
//             return RemoveGroupAsync(groupName, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task RemoveGroupAsync(string groupName, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Groups/RemoveGroup?");
//             if (groupName != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 201)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<Wrapper> AppleAppSiteAssociationAsync()
//         {
//             return AppleAppSiteAssociationAsync(System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<Wrapper> AppleAppSiteAssociationAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/apple-app-site-association");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<Wrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<string> GetLoginFromValidTokenAndMemberIdAsync(string token, int? memberId)
//         {
//             return GetLoginFromValidTokenAndMemberIdAsync(token, memberId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<string> GetLoginFromValidTokenAndMemberIdAsync(string token, int? memberId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/GetLoginFromValidTokenAndMemberId?");
//             if (token != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (memberId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("memberId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(memberId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task SetMemberIsApprovedAsync(int? memberId, bool? isApproved)
//         {
//             return SetMemberIsApprovedAsync(memberId, isApproved, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task SetMemberIsApprovedAsync(int? memberId, bool? isApproved, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/SetMemberIsApproved?");
//             if (memberId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("memberId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(memberId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (isApproved != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("isApproved") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isApproved, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<EmailSubscriptions> GetMemberEmailSubscriptionsAsync()
//         {
//             return GetMemberEmailSubscriptionsAsync(System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<EmailSubscriptions> GetMemberEmailSubscriptionsAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/GetMemberEmailSubscriptions");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<EmailSubscriptions>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task SetMemberEmailSubscriptionsAsync(EmailSubscriptions body)
//         {
//             return SetMemberEmailSubscriptionsAsync(body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task SetMemberEmailSubscriptionsAsync(EmailSubscriptions body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/SetMemberEmailSubscriptions");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("GET");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<MemberInfo> GetMemberInfoAsync(string shortUrl)
//         {
//             return GetMemberInfoAsync(shortUrl, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<MemberInfo> GetMemberInfoAsync(string shortUrl, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/GetMemberInfo?");
//             if (shortUrl != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("shortUrl") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shortUrl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<MemberInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<MemberInfo> GetMemberInfoByIdAsync(int? memberId)
//         {
//             return GetMemberInfoByIdAsync(memberId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<MemberInfo> GetMemberInfoByIdAsync(int? memberId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/GetMemberInfoById?");
//             if (memberId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("memberId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(memberId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<MemberInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<MemberInfo> GetMyMemberInfoAsync()
//         {
//             return GetMyMemberInfoAsync(System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<MemberInfo> GetMyMemberInfoAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/GetMyMemberInfo");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<MemberInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 403)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<bool> SignOutFromTokenAsync(string body)
//         {
//             return SignOutFromTokenAsync(body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<bool> SignOutFromTokenAsync(string body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/SignOutFromToken");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 400)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task RememberMeAutoLoginAsync()
//         {
//             return RememberMeAutoLoginAsync(System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task RememberMeAutoLoginAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/RememberMeAutoLogin");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 400)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<LoginResult> LoginByUsernameAsync(Login body)
//         {
//             return LoginByUsernameAsync(body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<LoginResult> LoginByUsernameAsync(Login body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/LoginByUsername");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<LoginResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 400)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<string> CreateFreeUserAsync(CreateFreeMember body)
//         {
//             return CreateFreeUserAsync(body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<string> CreateFreeUserAsync(CreateFreeMember body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/CreateFreeUser");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 400)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MinimalMemberInfo>> SearchMembersAsync(string terms)
//         {
//             return SearchMembersAsync(terms, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MinimalMemberInfo>> SearchMembersAsync(string terms, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/SearchMembers?");
//             if (terms != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("terms") + "=").Append(System.Uri.EscapeDataString(ConvertToString(terms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MinimalMemberInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<bool> ShouldShowNpsInputAsync()
//         {
//             return ShouldShowNpsInputAsync(System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<bool> ShouldShowNpsInputAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/ShouldShowNpsInput");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task ReportNpsInputAsync(NpsInput body)
//         {
//             return ReportNpsInputAsync(body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task ReportNpsInputAsync(NpsInput body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/ReportNpsInput");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("GET");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<string> TestAsync()
//         {
//             return TestAsync(System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<string> TestAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/test");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FreeActiveMembersData>> WeeklyActiveLoungeFreeMembersAsync()
//         {
//             return WeeklyActiveLoungeFreeMembersAsync(System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FreeActiveMembersData>> WeeklyActiveLoungeFreeMembersAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/WeeklyActiveLoungeFreeMembers");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 202)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Accepted", status_, responseText_, headers_, null);
//                         }
//                         else
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<FreeActiveMembersData>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FreeActiveMembersData>> MonthlyActiveLoungeFreeMembersAsync()
//         {
//             return MonthlyActiveLoungeFreeMembersAsync(System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FreeActiveMembersData>> MonthlyActiveLoungeFreeMembersAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/MonthlyActiveLoungeFreeMembers");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 202)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Accepted", status_, responseText_, headers_, null);
//                         }
//                         else
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<FreeActiveMembersData>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FreeActiveMembersData>> YearlyActiveLoungeFreeMembersAsync()
//         {
//             return YearlyActiveLoungeFreeMembersAsync(System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FreeActiveMembersData>> YearlyActiveLoungeFreeMembersAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/YearlyActiveLoungeFreeMembers");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 202)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Accepted", status_, responseText_, headers_, null);
//                         }
//                         else
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<FreeActiveMembersData>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task BlockMemberAsync(int? blockedMemberId)
//         {
//             return BlockMemberAsync(blockedMemberId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task BlockMemberAsync(int? blockedMemberId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/BlockMember?");
//             if (blockedMemberId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("blockedMemberId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(blockedMemberId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 202)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BlockedMember>> ListOfBlockedMembersAsync()
//         {
//             return ListOfBlockedMembersAsync(System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BlockedMember>> ListOfBlockedMembersAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/ListOfBlockedMembers");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 202)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Accepted", status_, responseText_, headers_, null);
//                         }
//                         else
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BlockedMember>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task ReportUserAsync(string reason, MemberInfo body)
//         {
//             return ReportUserAsync(reason, body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task ReportUserAsync(string reason, MemberInfo body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Members/ReportUser?");
//             if (reason != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("reason") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reason, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<DcHistory> CheckChatExistAsync(int? senderId, int? receiverId, string groupName, string displayName)
//         {
//             return CheckChatExistAsync(senderId, receiverId, groupName, displayName, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<DcHistory> CheckChatExistAsync(int? senderId, int? receiverId, string groupName, string displayName, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Message/CheckChatExist?");
//             if (senderId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("senderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(senderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (receiverId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("receiverId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(receiverId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (groupName != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (displayName != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("displayName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(displayName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/json"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<DcHistory>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task SaveMessageAsync(string groupName, string text, int? senderId, string senderName)
//         {
//             return SaveMessageAsync(groupName, text, senderId, senderName, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task SaveMessageAsync(string groupName, string text, int? senderId, string senderName, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Message/SaveMessage?");
//             if (groupName != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (text != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("text") + "=").Append(System.Uri.EscapeDataString(ConvertToString(text, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (senderId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("senderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(senderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (senderName != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("senderName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(senderName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 201)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MessageHistory>> GetChatMessageHistoryAsync(string groupName)
//         {
//             return GetChatMessageHistoryAsync(groupName, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MessageHistory>> GetChatMessageHistoryAsync(string groupName, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Message/GetChatMessageHistory?");
//             if (groupName != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/json"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MessageHistory>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<MessageHistory> GetLastChatMessageAsync(string groupName)
//         {
//             return GetLastChatMessageAsync(groupName, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<MessageHistory> GetLastChatMessageAsync(string groupName, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Message/GetLastChatMessage?");
//             if (groupName != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/json"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<MessageHistory>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DcHistory>> GetAllChatsByUserAsync(int? currentUserId)
//         {
//             return GetAllChatsByUserAsync(currentUserId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DcHistory>> GetAllChatsByUserAsync(int? currentUserId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Message/GetAllChatsByUser?");
//             if (currentUserId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("currentUserId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currentUserId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/json"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DcHistory>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task MarkMessagesAsReadAsync(string groupName, int? currentUserId)
//         {
//             return MarkMessagesAsReadAsync(groupName, currentUserId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task MarkMessagesAsReadAsync(string groupName, int? currentUserId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Message/MarkMessagesAsRead?");
//             if (groupName != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (currentUserId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("currentUserId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currentUserId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                     request_.Method = new System.Net.Http.HttpMethod("PUT");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<int> GetUnreadMessageCountAsync(string groupName, int? currentUserId)
//         {
//             return GetUnreadMessageCountAsync(groupName, currentUserId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<int> GetUnreadMessageCountAsync(string groupName, int? currentUserId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Message/GetUnreadMessageCount?");
//             if (groupName != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (currentUserId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("currentUserId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currentUserId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<int> GetTotalUnreadMessageCountAsync(int? currentUserId)
//         {
//             return GetTotalUnreadMessageCountAsync(currentUserId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<int> GetTotalUnreadMessageCountAsync(int? currentUserId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Message/GetTotalUnreadMessageCount?");
//             if (currentUserId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("currentUserId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currentUserId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>No Content</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task DeleteChatAsync(string groupName)
//         {
//             return DeleteChatAsync(groupName, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>No Content</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task DeleteChatAsync(string groupName, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Message/DeleteChat?");
//             if (groupName != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 204)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>No Content</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task DeleteSingleMessageAsync(string groupName, string message, int? senderId, System.DateTimeOffset? date)
//         {
//             return DeleteSingleMessageAsync(groupName, message, senderId, date, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>No Content</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task DeleteSingleMessageAsync(string groupName, string message, int? senderId, System.DateTimeOffset? date, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Message/DeleteSingleMessage?");
//             if (groupName != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (message != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("message") + "=").Append(System.Uri.EscapeDataString(ConvertToString(message, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (senderId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("senderId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(senderId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (date != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("date") + "=").Append(System.Uri.EscapeDataString(date.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 204)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task ChangeChatDisplayNameAsync(string groupName, string newDisplayName)
//         {
//             return ChangeChatDisplayNameAsync(groupName, newDisplayName, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task ChangeChatDisplayNameAsync(string groupName, string newDisplayName, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Message/ChangeChatDisplayName?");
//             if (groupName != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (newDisplayName != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("newDisplayName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(newDisplayName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                     request_.Method = new System.Net.Http.HttpMethod("PUT");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<bool> CheckIfDeletedAsync(string groupName)
//         {
//             return CheckIfDeletedAsync(groupName, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<bool> CheckIfDeletedAsync(string groupName, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Message/CheckIfDeleted?");
//             if (groupName != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("groupName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/json"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NotificationMessage>> GetMemberNotificationsAsync()
//         {
//             return GetMemberNotificationsAsync(System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NotificationMessage>> GetMemberNotificationsAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Notifications/GetMemberNotifications");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NotificationMessage>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<int> GetMemberNotificationsCountAsync(int? memberId)
//         {
//             return GetMemberNotificationsCountAsync(memberId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<int> GetMemberNotificationsCountAsync(int? memberId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Notifications/GetMemberNotificationsCount?");
//             if (memberId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("memberId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(memberId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task RemoveSubscriberNotificationAsync(int? notificationId)
//         {
//             return RemoveSubscriberNotificationAsync(notificationId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task RemoveSubscriberNotificationAsync(int? notificationId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Notifications/RemoveSubscriberNotification?");
//             if (notificationId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("notificationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(notificationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task RemoveNotificationAsync(long? postId)
//         {
//             return RemoveNotificationAsync(postId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task RemoveNotificationAsync(long? postId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Notifications/RemoveNotification?");
//             if (postId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("postId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task SetReadNotificationAsync(int? notificationId)
//         {
//             return SetReadNotificationAsync(notificationId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task SetReadNotificationAsync(int? notificationId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Notifications/SetReadNotification?");
//             if (notificationId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("notificationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(notificationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task ReadAllNotificationsAsync(System.Collections.Generic.IEnumerable<NotificationMessage> body)
//         {
//             return ReadAllNotificationsAsync(body, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task ReadAllNotificationsAsync(System.Collections.Generic.IEnumerable<NotificationMessage> body, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Notifications/ReadAllNotifications");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
//                     var content_ = new System.Net.Http.StringContent(json_);
//                     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                     request_.Content = content_;
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 404)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NpsResult>> NpsDataAsync()
//         {
//             return NpsDataAsync(System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NpsResult>> NpsDataAsync(System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Nps/NpsData");

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NpsResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task CreateMemberDeviceTokenAsync(string deviceToken, int? memberId)
//         {
//             return CreateMemberDeviceTokenAsync(deviceToken, memberId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task CreateMemberDeviceTokenAsync(string deviceToken, int? memberId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/PushNotifications/CreateMemberDeviceToken?");
//             if (deviceToken != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("deviceToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deviceToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (memberId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("memberId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(memberId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                     request_.Method = new System.Net.Http.HttpMethod("POST");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 201)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Created</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetTokenForMemberAsync(int? memberId)
//         {
//             return GetTokenForMemberAsync(memberId, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Created</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetTokenForMemberAsync(int? memberId, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/PushNotifications/GetTokenForMember?");
//             if (memberId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("memberId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(memberId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");
//                     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 201)
//                         {
//                             var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                             if (objectResponse_.Object == null)
//                             {
//                                 throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                             }
//                             return objectResponse_.Object;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual System.Threading.Tasks.Task StopPushedNotificationsAsync(int? memberId, string deviceToken)
//         {
//             return StopPushedNotificationsAsync(memberId, deviceToken, System.Threading.CancellationToken.None);
//         }

//         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//         /// <returns>Success</returns>
//         /// <exception cref="ApiException">A server side error occurred.</exception>
//         public virtual async System.Threading.Tasks.Task StopPushedNotificationsAsync(int? memberId, string deviceToken, System.Threading.CancellationToken cancellationToken)
//         {
//             var urlBuilder_ = new System.Text.StringBuilder();
//             urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/PushNotifications/StopPushedNotifications?");
//             if (memberId != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("memberId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(memberId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             if (deviceToken != null)
//             {
//                 urlBuilder_.Append(System.Uri.EscapeDataString("deviceToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deviceToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//             }
//             urlBuilder_.Length--;

//             var client_ = _httpClient;
//             var disposeClient_ = false;
//             try
//             {
//                 using (var request_ = new System.Net.Http.HttpRequestMessage())
//                 {
//                     request_.Method = new System.Net.Http.HttpMethod("GET");

//                     PrepareRequest(client_, request_, urlBuilder_);

//                     var url_ = urlBuilder_.ToString();
//                     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                     PrepareRequest(client_, request_, url_);

//                     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                     var disposeResponse_ = true;
//                     try
//                     {
//                         var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                         if (response_.Content != null && response_.Content.Headers != null)
//                         {
//                             foreach (var item_ in response_.Content.Headers)
//                                 headers_[item_.Key] = item_.Value;
//                         }

//                         ProcessResponse(client_, response_);

//                         var status_ = (int)response_.StatusCode;
//                         if (status_ == 200)
//                         {
//                             return;
//                         }
//                         else
//                         if (status_ == 500)
//                         {
//                             string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("Server Error", status_, responseText_, headers_, null);
//                         }
//                         else
//                         {
//                             var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                             throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                         }
//                     }
//                     finally
//                     {
//                         if (disposeResponse_)
//                             response_.Dispose();
//                     }
//                 }
//             }
//             finally
//             {
//                 if (disposeClient_)
//                     client_.Dispose();
//             }
//         }

//         protected struct ObjectResponseResult<T>
//         {
//             public ObjectResponseResult(T responseObject, string responseText)
//             {
//                 this.Object = responseObject;
//                 this.Text = responseText;
//             }

//             public T Object { get; }

//             public string Text { get; }
//         }

//         public bool ReadResponseAsString { get; set; }

//         protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//         {
//             if (response == null || response.Content == null)
//             {
//                 return new ObjectResponseResult<T>(default(T), string.Empty);
//             }

//             if (ReadResponseAsString)
//             {
//                 var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                 try
//                 {
//                     var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                     return new ObjectResponseResult<T>(typedBody, responseText);
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                 }
//             }
//             else
//             {
//                 try
//                 {
//                     using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                     using (var streamReader = new System.IO.StreamReader(responseStream))
//                     using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                     {
//                         var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                         var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                         return new ObjectResponseResult<T>(typedBody, string.Empty);
//                     }
//                 }
//                 catch (Newtonsoft.Json.JsonException exception)
//                 {
//                     var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                     throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                 }
//             }
//         }

//         private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//         {
//             if (value == null)
//             {
//                 return "";
//             }

//             if (value is System.Enum)
//             {
//                 var name = System.Enum.GetName(value.GetType(), value);
//                 if (name != null)
//                 {
//                     var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                     if (field != null)
//                     {
//                         var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
//                             as System.Runtime.Serialization.EnumMemberAttribute;
//                         if (attribute != null)
//                         {
//                             return attribute.Value != null ? attribute.Value : name;
//                         }
//                     }

//                     var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                     return converted == null ? string.Empty : converted;
//                 }
//             }
//             else if (value is bool) 
//             {
//                 return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//             }
//             else if (value is byte[])
//             {
//                 return System.Convert.ToBase64String((byte[]) value);
//             }
//             else if (value.GetType().IsArray)
//             {
//                 var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
//                 return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//             }

//             var result = System.Convert.ToString(value, cultureInfo);
//             return result == null ? "" : result;
//         }
//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class BlobDto
//     {
//         [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Name { get; set; }

//         [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Uri { get; set; }

//         [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string ContentType { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class BlockedMember
//     {
//         [Newtonsoft.Json.JsonProperty("memberId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int MemberId { get; set; }

//         [Newtonsoft.Json.JsonProperty("blockedMemberId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int BlockedMemberId { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class Comment
//     {
//         [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public long Id { get; set; }

//         [Newtonsoft.Json.JsonProperty("authorMemberId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int AuthorMemberId { get; set; }

//         [Newtonsoft.Json.JsonProperty("updatedDt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.DateTimeOffset UpdatedDt { get; set; }

//         [Newtonsoft.Json.JsonProperty("createdDt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.DateTimeOffset CreatedDt { get; set; }

//         [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Text { get; set; }

//         [Newtonsoft.Json.JsonProperty("likeType2Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.Collections.Generic.IDictionary<string, int> LikeType2Count { get; set; }

//         [Newtonsoft.Json.JsonProperty("browserLikeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int? BrowserLikeType { get; set; }

//         [Newtonsoft.Json.JsonProperty("responses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.Collections.Generic.ICollection<Comment> Responses { get; set; }

//         [Newtonsoft.Json.JsonProperty("hasMedia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public bool? HasMedia { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class CountryCode
//     {
//         [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int Id { get; set; }

//         [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Name { get; set; }

//         [Newtonsoft.Json.JsonProperty("dialCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string DialCode { get; set; }

//         [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string ShortName { get; set; }

//         [Newtonsoft.Json.JsonProperty("flag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Flag { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class CreateFreeMember
//     {
//         [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Name { get; set; }

//         [Newtonsoft.Json.JsonProperty("clearTextPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string ClearTextPassword { get; set; }

//         [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Email { get; set; }

//         [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string PhoneNumber { get; set; }

//         [Newtonsoft.Json.JsonProperty("cvr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Cvr { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class DcHistory
//     {
//         [Newtonsoft.Json.JsonProperty("groupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string GroupName { get; set; }

//         [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string DisplayName { get; set; }

//         [Newtonsoft.Json.JsonProperty("newDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string NewDisplayName { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class EmailSubscriptions
//     {
//         [Newtonsoft.Json.JsonProperty("newPosts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public bool NewPosts { get; set; }

//         [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public bool Comments { get; set; }

//         [Newtonsoft.Json.JsonProperty("mentions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public bool Mentions { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class Embedded
//     {
//         [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Url { get; set; }

//         [Newtonsoft.Json.JsonProperty("img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Img { get; set; }

//         [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Title { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class Emoji
//     {
//         [Newtonsoft.Json.JsonProperty("emojiId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int EmojiId { get; set; }

//         [Newtonsoft.Json.JsonProperty("emojiIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string EmojiIcon { get; set; }

//         [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Description { get; set; }

//         [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Category { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class FreeActiveMembersData
//     {
//         [Newtonsoft.Json.JsonProperty("memberId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int MemberId { get; set; }

//         [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Name { get; set; }

//         [Newtonsoft.Json.JsonProperty("isApproved", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public bool? IsApproved { get; set; }

//         [Newtonsoft.Json.JsonProperty("loginCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int LoginCount { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class GroupBanner
//     {
//         [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int Id { get; set; }

//         [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public long GroupId { get; set; }

//         [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Text { get; set; }

//         [Newtonsoft.Json.JsonProperty("imgUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string ImgUrl { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class LikeCommand
//     {
//         [Newtonsoft.Json.JsonProperty("messageId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public long MessageId { get; set; }

//         [Newtonsoft.Json.JsonProperty("likeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int LikeType { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class Login
//     {
//         [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Username { get; set; }

//         [Newtonsoft.Json.JsonProperty("clearTextPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string ClearTextPassword { get; set; }

//         [Newtonsoft.Json.JsonProperty("crossSessionUniqueClientID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string CrossSessionUniqueClientID { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class LoginResult
//     {
//         [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public bool Success { get; set; }

//         [Newtonsoft.Json.JsonProperty("accountLockedOut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public bool? AccountLockedOut { get; set; }

//         [Newtonsoft.Json.JsonProperty("memberId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int MemberId { get; set; }

//         [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Token { get; set; }

//         [Newtonsoft.Json.JsonProperty("leftLoginAttempts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int LeftLoginAttempts { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class MatchingPost
//     {
//         [Newtonsoft.Json.JsonProperty("postId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public long PostId { get; set; }

//         [Newtonsoft.Json.JsonProperty("messageId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public long MessageId { get; set; }

//         [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int GroupId { get; set; }

//         [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.DateTimeOffset DateTime { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class MemberInfo
//     {
//         [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int Id { get; set; }

//         [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Name { get; set; }

//         [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Email { get; set; }

//         [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.DateTimeOffset CreateDate { get; set; }

//         [Newtonsoft.Json.JsonProperty("updateDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.DateTimeOffset UpdateDate { get; set; }

//         [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Username { get; set; }

//         [Newtonsoft.Json.JsonProperty("avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Avatar { get; set; }

//         [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Alias { get; set; }

//         [Newtonsoft.Json.JsonProperty("isAdmin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public bool IsAdmin { get; set; }

//         [Newtonsoft.Json.JsonProperty("isApproved", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public bool IsApproved { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class MemberLike
//     {
//         [Newtonsoft.Json.JsonProperty("memberName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string MemberName { get; set; }

//         [Newtonsoft.Json.JsonProperty("memberId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int MemberId { get; set; }

//         [Newtonsoft.Json.JsonProperty("likeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int LikeType { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class MessageHistory
//     {
//         [Newtonsoft.Json.JsonProperty("chatId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int ChatId { get; set; }

//         [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Message { get; set; }

//         [Newtonsoft.Json.JsonProperty("senderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int SenderId { get; set; }

//         [Newtonsoft.Json.JsonProperty("senderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string SenderName { get; set; }

//         [Newtonsoft.Json.JsonProperty("isRead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string IsRead { get; set; }

//         [Newtonsoft.Json.JsonProperty("sentDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.DateTimeOffset SentDate { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class MinimalMemberInfo
//     {
//         [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int Id { get; set; }

//         [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Name { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class NotificationMessage
//     {
//         [Newtonsoft.Json.JsonProperty("notificationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int NotificationId { get; set; }

//         [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Message { get; set; }

//         [Newtonsoft.Json.JsonProperty("postId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public long? PostId { get; set; }

//         [Newtonsoft.Json.JsonProperty("isRead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public bool IsRead { get; set; }

//         [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int? GroupId { get; set; }

//         [Newtonsoft.Json.JsonProperty("commentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public long? CommentId { get; set; }

//         [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.DateTimeOffset? CreatedDate { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class NpsInput
//     {
//         [Newtonsoft.Json.JsonProperty("nps", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int Nps { get; set; }

//         [Newtonsoft.Json.JsonProperty("sugestion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Sugestion { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class NpsResult
//     {
//         [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Name { get; set; }

//         [Newtonsoft.Json.JsonProperty("reportDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string ReportDate { get; set; }

//         [Newtonsoft.Json.JsonProperty("nps", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int Nps { get; set; }

//         [Newtonsoft.Json.JsonProperty("suggestion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Suggestion { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class OpenGraphInfo
//     {
//         [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Title { get; set; }

//         [Newtonsoft.Json.JsonProperty("unixTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public long UnixTime { get; set; }

//         [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Description { get; set; }

//         [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Image { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class Post
//     {
//         [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public long Id { get; set; }

//         [Newtonsoft.Json.JsonProperty("authorMemberId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int AuthorMemberId { get; set; }

//         [Newtonsoft.Json.JsonProperty("updatedDt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.DateTimeOffset UpdatedDt { get; set; }

//         [Newtonsoft.Json.JsonProperty("createdDt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.DateTimeOffset CreatedDt { get; set; }

//         [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Text { get; set; }

//         [Newtonsoft.Json.JsonProperty("likeType2Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.Collections.Generic.IDictionary<string, int> LikeType2Count { get; set; }

//         [Newtonsoft.Json.JsonProperty("browserLikeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int? BrowserLikeType { get; set; }

//         [Newtonsoft.Json.JsonProperty("responses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.Collections.Generic.ICollection<Comment> Responses { get; set; }

//         [Newtonsoft.Json.JsonProperty("hasMedia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public bool? HasMedia { get; set; }

//         [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int GroupId { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class ProblemDetails
//     {
//         [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Type { get; set; }

//         [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Title { get; set; }

//         [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int? Status { get; set; }

//         [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Detail { get; set; }

//         [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Instance { get; set; }

//         private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//         [Newtonsoft.Json.JsonExtensionData]
//         public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//         {
//             get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//             set { _additionalProperties = value; }
//         }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class Registration
//     {
//         [Newtonsoft.Json.JsonProperty("memberId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int MemberId { get; set; }

//         [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Login { get; set; }

//         [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string FirstName { get; set; }

//         [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string LastName { get; set; }

//         [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Email { get; set; }

//         [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Password { get; set; }

//         [Newtonsoft.Json.JsonProperty("confirmPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string ConfirmPassword { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class RegistrationResult
//     {
//         [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public bool Success { get; set; }

//         [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Message { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class ScGroup
//     {
//         [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int GroupId { get; set; }

//         [Newtonsoft.Json.JsonProperty("groupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string GroupName { get; set; }

//         [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Url { get; set; }

//         [Newtonsoft.Json.JsonProperty("createdDt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.DateTimeOffset CreatedDt { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class TrackCommand
//     {
//         [Newtonsoft.Json.JsonProperty("postId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public long PostId { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class TrackedAndNewPosts
//     {
//         [Newtonsoft.Json.JsonProperty("tracked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public bool Tracked { get; set; }

//         [Newtonsoft.Json.JsonProperty("newPosts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public int NewPosts { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class Translation
//     {
//         [Newtonsoft.Json.JsonProperty("translatedText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string TranslatedText { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class Wrapper
//     {
//         [Newtonsoft.Json.JsonProperty("applinks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public Applinks Applinks { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class WriteMessage
//     {
//         [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public long Id { get; set; }

//         [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string Text { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class Applinks
//     {
//         [Newtonsoft.Json.JsonProperty("apps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.Collections.Generic.ICollection<string> Apps { get; set; }

//         [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.Collections.Generic.ICollection<Details> Details { get; set; }

//     }

//     [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class Details
//     {
//         [Newtonsoft.Json.JsonProperty("appID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public string AppID { get; set; }

//         [Newtonsoft.Json.JsonProperty("paths", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//         public System.Collections.Generic.ICollection<string> Paths { get; set; }

//     }



//     [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class ApiException : System.Exception
//     {
//         public int StatusCode { get; private set; }

//         public string Response { get; private set; }

//         public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

//         public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
//             : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
//         {
//             StatusCode = statusCode;
//             Response = response;
//             Headers = headers;
//         }

//         public override string ToString()
//         {
//             return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
//         }
//     }

//     [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
//     public partial class ApiException<TResult> : ApiException
//     {
//         public TResult Result { get; private set; }

//         public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
//             : base(message, statusCode, response, headers, innerException)
//         {
//             Result = result;
//         }
//     }

// }

// #pragma warning restore  108
// #pragma warning restore  114
// #pragma warning restore  472
// #pragma warning restore  612
// #pragma warning restore 1573
// #pragma warning restore 1591
// #pragma warning restore 8073
// #pragma warning restore 3016
// #pragma warning restore 8603
// #pragma warning restore 8604